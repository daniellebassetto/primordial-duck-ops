// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrimordialDuckOperation.Infrastructure.Data;

#nullable disable

namespace PrimordialDuckOperation.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrimordialDuckOperation.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("funcao");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PrimordialDuckOperation.Domain.Entities.CaptureOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("CaptureResult")
                        .HasColumnType("int")
                        .HasColumnName("resultado_captura");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<int>("DefenseGenerated")
                        .HasColumnType("int")
                        .HasColumnName("defesa_gerada");

                    b.Property<long>("DroneId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_drone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fim");

                    b.Property<bool>("IsAutoGuided")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("guiado_automaticamente");

                    b.Property<long>("PrimordialDuckId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_pato_primordial");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("inicio");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("Strategy")
                        .HasColumnType("int")
                        .HasColumnName("estrategia");

                    b.Property<int>("SuccessChance")
                        .HasColumnType("int")
                        .HasColumnName("chance_sucesso");

                    b.HasKey("Id");

                    b.HasIndex("DroneId");

                    b.HasIndex("PrimordialDuckId");

                    b.ToTable("operacoes_captura", (string)null);
                });

            modelBuilder.Entity("PrimordialDuckOperation.Domain.Entities.Drone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BatteryLevel")
                        .HasColumnType("int")
                        .HasColumnName("nivel_bateria");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("marca");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_alteracao");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("pais_origem");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<int>("FuelLevel")
                        .HasColumnType("int")
                        .HasColumnName("nivel_combustivel");

                    b.Property<int>("Integrity")
                        .HasColumnType("int")
                        .HasColumnName("integridade");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ultima_manutencao");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fabricante");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("numero_serie");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("drones", (string)null);
                });

            modelBuilder.Entity("PrimordialDuckOperation.Domain.Entities.PrimordialDuck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime>("DiscoveredAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_descoberta");

                    b.Property<long>("DroneId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_drone");

                    b.Property<int?>("HeartRate")
                        .HasColumnType("int")
                        .HasColumnName("batimentos_cardiacos");

                    b.Property<int>("HibernationStatus")
                        .HasColumnType("int")
                        .HasColumnName("status_hibernacao");

                    b.Property<int>("MutationCount")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_mutacoes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apelido");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("SuperPowerId")
                        .HasColumnType("bigint")
                        .HasColumnName("id_super_poder");

                    b.HasKey("Id");

                    b.HasIndex("DroneId");

                    b.HasIndex("SuperPowerId");

                    b.ToTable("patos_primordiais", (string)null);
                });

            modelBuilder.Entity("PrimordialDuckOperation.Domain.Entities.SuperPower", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_alteracao");

                    b.Property<int>("Classification")
                        .HasColumnType("int")
                        .HasColumnName("classificacao");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("descricao");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("super_poderes", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrimordialDuckOperation.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrimordialDuckOperation.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimordialDuckOperation.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrimordialDuckOperation.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrimordialDuckOperation.Domain.Entities.CaptureOperation", b =>
                {
                    b.HasOne("PrimordialDuckOperation.Domain.Entities.Drone", "Drone")
                        .WithMany()
                        .HasForeignKey("DroneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_operacoes_captura_drones");

                    b.HasOne("PrimordialDuckOperation.Domain.Entities.PrimordialDuck", "PrimordialDuck")
                        .WithMany("CaptureOperations")
                        .HasForeignKey("PrimordialDuckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_operacoes_captura_patos_primordiais");

                    b.Navigation("Drone");

                    b.Navigation("PrimordialDuck");
                });

            modelBuilder.Entity("PrimordialDuckOperation.Domain.Entities.PrimordialDuck", b =>
                {
                    b.HasOne("PrimordialDuckOperation.Domain.Entities.Drone", "Drone")
                        .WithMany("PrimordialDucks")
                        .HasForeignKey("DroneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrimordialDuckOperation.Domain.Entities.SuperPower", "SuperPower")
                        .WithMany("PrimordialDucks")
                        .HasForeignKey("SuperPowerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("PrimordialDuckOperation.Domain.ValueObjects.HeightMeasurement", "Height", b1 =>
                        {
                            b1.Property<long>("PrimordialDuckId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Unit")
                                .HasColumnType("int")
                                .HasColumnName("altura_unidade");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("altura_valor");

                            b1.HasKey("PrimordialDuckId");

                            b1.ToTable("patos_primordiais");

                            b1.WithOwner()
                                .HasForeignKey("PrimordialDuckId");
                        });

                    b.OwnsOne("PrimordialDuckOperation.Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<long>("PrimordialDuckId")
                                .HasColumnType("bigint");

                            b1.Property<string>("CityName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("varchar(200)")
                                .HasColumnName("cidade");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("pais");

                            b1.Property<decimal>("Latitude")
                                .HasColumnType("decimal(10,8)")
                                .HasColumnName("latitude");

                            b1.Property<decimal>("Longitude")
                                .HasColumnType("decimal(10,8)")
                                .HasColumnName("longitude");

                            b1.Property<string>("ReferencePoint")
                                .HasMaxLength(300)
                                .HasColumnType("varchar(300)")
                                .HasColumnName("ponto_referencia");

                            b1.HasKey("PrimordialDuckId");

                            b1.ToTable("patos_primordiais");

                            b1.WithOwner()
                                .HasForeignKey("PrimordialDuckId");
                        });

                    b.OwnsOne("PrimordialDuckOperation.Domain.ValueObjects.PrecisionMeasurement", "GpsPrecision", b1 =>
                        {
                            b1.Property<long>("PrimordialDuckId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Unit")
                                .HasColumnType("int")
                                .HasColumnName("precisao_gps_unidade");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("precisao_gps_valor");

                            b1.HasKey("PrimordialDuckId");

                            b1.ToTable("patos_primordiais");

                            b1.WithOwner()
                                .HasForeignKey("PrimordialDuckId");
                        });

                    b.OwnsOne("PrimordialDuckOperation.Domain.ValueObjects.WeightMeasurement", "Weight", b1 =>
                        {
                            b1.Property<long>("PrimordialDuckId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Unit")
                                .HasColumnType("int")
                                .HasColumnName("peso_unidade");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("peso_valor");

                            b1.HasKey("PrimordialDuckId");

                            b1.ToTable("patos_primordiais");

                            b1.WithOwner()
                                .HasForeignKey("PrimordialDuckId");
                        });

                    b.Navigation("Drone");

                    b.Navigation("GpsPrecision")
                        .IsRequired();

                    b.Navigation("Height")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("SuperPower");

                    b.Navigation("Weight")
                        .IsRequired();
                });

            modelBuilder.Entity("PrimordialDuckOperation.Domain.Entities.Drone", b =>
                {
                    b.Navigation("PrimordialDucks");
                });

            modelBuilder.Entity("PrimordialDuckOperation.Domain.Entities.PrimordialDuck", b =>
                {
                    b.Navigation("CaptureOperations");
                });

            modelBuilder.Entity("PrimordialDuckOperation.Domain.Entities.SuperPower", b =>
                {
                    b.Navigation("PrimordialDucks");
                });
#pragma warning restore 612, 618
        }
    }
}
