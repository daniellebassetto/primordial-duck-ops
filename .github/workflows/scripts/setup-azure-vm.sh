#!/bin/bash

# ü¶Ü Primordial Duck Operation - Azure VM Setup Script
# Este script configura automaticamente uma VM Linux para receber deploys

set -e

echo "ü¶Ü Primordial Duck Operation - Azure VM Setup"
echo "=============================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Verificar se est√° rodando como root
if [ "$EUID" -eq 0 ]; then 
    echo -e "${RED}‚ùå N√£o execute este script como root!${NC}"
    echo "Execute: bash setup-azure-vm.sh"
    exit 1
fi

echo -e "${YELLOW}üìã Este script ir√°:${NC}"
echo "  1. Atualizar o sistema"
echo "  2. Instalar Docker e Docker Compose"
echo "  3. Configurar firewall b√°sico"
echo "  4. Criar diret√≥rios necess√°rios"
echo "  5. Configurar permiss√µes"
echo ""
read -p "Deseja continuar? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
fi

echo ""
echo -e "${GREEN}üîÑ Atualizando sistema...${NC}"
sudo apt update && sudo apt upgrade -y

echo ""
echo -e "${GREEN}üê≥ Instalando Docker...${NC}"
if ! command -v docker &> /dev/null; then
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    rm get-docker.sh
    echo -e "${GREEN}‚úÖ Docker instalado com sucesso${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker j√° est√° instalado${NC}"
fi

echo ""
echo -e "${GREEN}üîß Instalando Docker Compose...${NC}"
if ! command -v docker-compose &> /dev/null; then
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    echo -e "${GREEN}‚úÖ Docker Compose instalado com sucesso${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker Compose j√° est√° instalado${NC}"
fi

echo ""
echo -e "${GREEN}üìÅ Criando diret√≥rios...${NC}"
sudo mkdir -p /opt/primordial-duck-operation
sudo chown $USER:$USER /opt/primordial-duck-operation
echo -e "${GREEN}‚úÖ Diret√≥rio criado: /opt/primordial-duck-operation${NC}"

echo ""
echo -e "${GREEN}üî• Configurando firewall...${NC}"
if command -v ufw &> /dev/null; then
    sudo ufw --force enable
    sudo ufw allow 22/tcp    # SSH
    sudo ufw allow 80/tcp    # HTTP
    sudo ufw allow 443/tcp   # HTTPS
    sudo ufw allow 7000/tcp  # API
    sudo ufw status
    echo -e "${GREEN}‚úÖ Firewall configurado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  UFW n√£o est√° dispon√≠vel, configure o firewall manualmente${NC}"
fi

echo ""
echo -e "${GREEN}üìä Verificando instala√ß√µes...${NC}"
echo "Docker version:"
docker --version
echo ""
echo "Docker Compose version:"
docker-compose --version
echo ""

echo ""
echo -e "${GREEN}‚úÖ Setup conclu√≠do com sucesso!${NC}"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  IMPORTANTE:${NC}"
echo "  1. Voc√™ precisa fazer logout e login novamente para usar o Docker sem sudo"
echo "  2. Ou execute: newgrp docker"
echo ""
echo -e "${YELLOW}üìã Pr√≥ximos passos:${NC}"
echo "  1. Configure os secrets no GitHub (veja .github/workflows/README.md)"
echo "  2. Adicione sua chave SSH p√∫blica em ~/.ssh/authorized_keys"
echo "  3. Execute o workflow no GitHub Actions"
echo ""
echo -e "${GREEN}ü¶Ü Informa√ß√µes da VM:${NC}"
echo "  IP P√∫blico: $(curl -s ifconfig.me)"
echo "  Hostname: $(hostname)"
echo "  Usu√°rio: $USER"
echo "  Diret√≥rio de deploy: /opt/primordial-duck-operation"
echo ""

# Perguntar se quer reiniciar
read -p "Deseja reiniciar a VM agora para aplicar as mudan√ßas? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}üîÑ Reiniciando em 5 segundos...${NC}"
    sleep 5
    sudo reboot
fi
